using System;
using System.Linq;
using System.Text;
using static System.Math;
using System.Diagnostics;
using System.Globalization;
using System.Threading.Tasks;
using System.Collections.Generic;
using static System.Numerics.Vector;
using System.Runtime.InteropServices.ComTypes;

namespace ConsoleApp1
{
    class Program
    {
       
        public static int bs(int wantNum,int size,int[] arr)
        {
            if (!arr.Contains(wantNum)) return -1; // Not found
            int st = 0, end = size- 1;
            int idx = -1;
            while (st<=end )
            {
               int mid = (st + end) / 2;
                if (arr[mid] <= wantNum)
                {
                    if (arr[mid] == wantNum)
                       return   mid;
                    st = mid+1;
                }
                else end = mid-1;
            }
            return idx ;
        }
        
        static void Main(string[] args)
        {
            Console.Write("Enter a number N (size of array): ");
            int n = int.Parse(Console.ReadLine());

            Console.Write("Enter a searched number: ");
            int searchedNumber = int.Parse(Console.ReadLine());

            int[] numbers = new int[n];
            Console.WriteLine("\nEnter a {0} number(s) to array: ", n);
            for (int i = 0; i < numbers.Length; i++)
            {
                Console.Write("   {0}: ", i + 1);
                numbers[i] = int.Parse(Console.ReadLine());
            }

            Array.Sort(numbers);

           int idx= bs(searchedNumber, n, numbers);
            Console.WriteLine("\n: searchedNumber :{0} ", idx);

        }
    }
}
===============================================================recusion



    static int BinarySearch(int[] numbers, int value, int startIndex, int endIndex)
    {
        if (!numbers.Contains(value)) return -1; // Not found

        int middleIndex = (startIndex + endIndex) / 2;

        if (numbers[middleIndex] == value)
        {
            return middleIndex;
        }
        else if (numbers[middleIndex] > value)
        {
            return BinarySearch(numbers, value, 0, middleIndex - 1);
        }
        else
        {
            return BinarySearch(numbers, value, middleIndex + 1, numbers.Length - 1);
        }
    }
}
 
